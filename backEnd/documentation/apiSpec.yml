openapi: 3.0.0
servers:
  - description: localhost server
    url: http://localhost:3000/delilahResto
info:
  title: Delilah Resto API
  version: 1.0.0
  description: "API for delicious food orders. As a customer, you can register, update your information, see the list of our products and place an order. Restaurant managers have the ability to consult/delete orders and update their status, as well as to create/update/consult products, and access/update users' information (except their passwords)." 
  contact:
    email: jmrassaproduccion@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
- name: admins
  description: "Users with access permissions that allow all type of operations across the API."
- name: clients
  description: "Users with restrictions that allow operations only for clients."
- name: /users
  description: "Endpoint for all the CRUD requests related to all the User types."
- name: /products
  description: "Endpoint for all the CRUD requests related the store's Products."
- name: /orders
  description: "Endpoint for all the CRUD requests related to all the Orders managed by the store."

security:
  - bearerAuth: []
paths:
  # Users' endpoints:
  /users/register: #Admins-Clients
    post:
      tags:
      - admins
      - clients
      - /users
      summary: "Registration of new user: Admins and Client."
      operationId: "registerUser"
      description: "Creates a new user registration with all the required schema information. Please refer to the 'registerSchema' in the Schemas section to understand how to grant or deny Admins permissions."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/req.registerSchema"
      responses:
        400:
          description: "Bad Request: Something in the request body is missing or does not match the schema."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unmatchedSchema"
        409:
          description: "Conflict: One of the received values must be unique in the data base and has been found registered in other user's information."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.userCreationConflict"
        201:
          description: "Created: User created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.userCreated"
  /users/login: #Admins-Clients  
    post: 
      tags:
      - admins
      - clients
      - /users
      summary: "Login to Delilah Resto: Admins and Clients."
      operationId: "loginUser"
      description: "If success, a JWT (JSON Web Token) is delivered back as a response to the user."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/req.loginSchema"
      responses:
        400:
          description: "Bad Request: Something in the request body is missing or does not match the schema."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unmatchedSchema"
        403:
          description: "Forbidden: No valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        200:
          description: "OK: Login successful."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.loginJWT"
  /users/allRegistered: #Admins
    get:
      tags:
      - admins
      - /users
      summary: "Obtain the accessible info of all users: just Admins."
      operationId: "getAllUsers"
      description: "The server delivers all of the registered users' information. It is worth to note that the passwords are encrypted."
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        200:
          description: "OK: The list of all the registered users was obtained."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.getAllUsers"
  /users/byId:{userId}: #Admins-Clients
    get:
      tags:
      - admins
      - clients
      - /users
      summary: "Obtain user information by their ID: Admins and Clients (with restrictions)."
      operationId: "getUserById"
      description: "Admins can access to any user's information. Clients can access only to their own   information by giving to the {userId} paramenter the value of 'i'. Admins can also access their own information by this way."
      parameters:
      - name: userId
        in: path 
        required: true
        description: "If a user, either Admins or Clients, wants to access their own info, please use 'i' as the params' value."
        schema:
          type: string
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        200:
          description: "OK: If found, the user's information is delivered, otherwise, it is indicated   that the user doesn't exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.getUser"
  /users/byUsername:{username}: #Admins
    get:
      tags:
      - admins
      - /users
      summary: "Obtain user information by their username: just Admins."
      operationId: "getUserByUsername"
      description: "The server delivers the users' information. The password is not included."
      parameters:
      - name: username
        in: path 
        required: true
        description: "The searched user's username."
        schema:
          type: string
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        400:
          description: "Bad Request: Something in the request body is missing or does not match the schema."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unmatchedSchema"
        200:
          description: "OK: If found, the user's information is delivered, otherwise, it is indicated   that the user doesn't exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.getUser"
  /users/byEmail:{email}: #Admins
    get:
      tags:
      - admins
      - /users
      summary: "Obtain user information by their email: just Admins."
      operationId: "getUserByMail"
      description: "The server delivers the users' information. The password is not included."
      parameters:
      - name: email
        in: path 
        required: true
        description: "The searched user's email."
        schema:
          type: string
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        400:
          description: "Bad Request: Something in the request body is missing or does not match the schema."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unmatchedSchema"
        200:
          description: "OK: If found, the user's information is delivered, otherwise, it is indicated   that the user doesn't exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.getUser"
  /users/update:{userId}: #Admins-Clients
    put:
      tags:
      - admins
      - clients
      - /users
      summary: "Update the user's info by their ID: Admins and Clients (with restrictions)."
      operationId: "updateUserById"
      description: "Admins can update any user's information, except their passwords. Clients can only update their own info by giving the {userId} parameter the value of 'i', excepto for their access permissions. Admins can also their own info by this way."
      parameters:
      - name: userId
        in: path 
        required: true
        description: "If a user, either Admins or Clients, wants to update their own info, please use 'i' as the params' value."
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/req.updateUserSchema"
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        400:
          description: "Bad Request: Something in the request body is missing or does not match the schema."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unmatchedSchema"
        409:
          description: "Conflict: One of the received values must be unique in the data base and has been found registered in other user's information."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.userCreationConflict"
        200:
          description: "OK: The request was received and processed, but no user was found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.updateUserById"
        204:
          description: "No Content: The update was successful."
  /users/delete:{userId}: #Admins
    delete:
      tags:
      - admins
      - /users
      summary: "Delete any user by their ID: just Admins."
      operationId: "deleteUserById"
      description: "Admins can delete completely any user from the system's database."
      parameters:
      - name: userId
        in: path 
        required: true
        description: "The ID of the user that will be deleted."
        schema:
          type: string
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        200:
          description: "OK: The request was received and processed, but no user was found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.deleteUserById"
        204:
          description: "No Content: The deletion was successful."
  #+++++++++++++++++++++++++++++++++++++++++++++++++#
  # Products' endpoints:  
  /products/create:
    post: #create product (just admin)
      tags:
      - admins
      - /products
      summary: "Creation of a new product."
      operationId: "createNewProduct"
      description: "Ony Admins are able to create a new product based on the information required by the 'req.productSchema'."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/req.productSchema"
      responses:
        403:
          description: "Forbidden: No valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        400:
          description: "Bad Request: Something in the request body is missing or does not match the   schema."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unmatchedSchema"
        201:
            description: "Created: Product created successfully."
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/res.productCreated"
  /products/productId:{productId}:
    get: #byProductId (admin - user)
      tags:
      - admins
      - clients
      - /products
      summary: "Obtain a product's info by their ID: Admins and Clients."
      operationId: "getProductById"
      description: "Any user can access the product's information."
      parameters:
      - name: productId
        in: path 
        required: true
        description: "Product's ID."
        schema:
          type: string
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        200:
          description: "OK: If found, the product's information is delivered, otherwise, it is indicated that the product doesn't exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.getProduct"
  /products/productName:{productName}:
    get: #byProductName (admin - user)
      tags:
      - admins
      - clients
      - /products
      summary: "Obtain a product's info by their name: Admins and Clients."
      operationId: "getProductByName"
      description: "Any user can access the product's information."
      parameters:
      - name: productName
        in: path 
        required: true
        description: "Product's Name."
        schema:
          type: string
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        200:
          description: "OK: If found, the product's information is delivered, otherwise, it is indicated that the product doesn't exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.getProduct"
  /products/allProducts:
    get: #allProducts (admin - user)
      tags:
      - admins
      - clients
      - /products
      summary: "Obtain the information of all the products."
      operationId: "getAllProducts"
      description: "The server delivers all of the products' information."
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        200:
          description: "OK: The list of all of the products was obtained."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.getAllProducts"
  /products/updateProductId:{productId}:
    put: #byId (just admin)
      tags:
      - admins
      - /products
      summary: "Update the products's info by their ID: just Admins."
      operationId: "updateProductById"
      description: "Admins can update any product's information "
      parameters:
      - name: productId
        in: path 
        required: true
        description: "Product's ID."
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/req.updateUserSchema"
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        400:
          description: "Bad Request: Something in the request body is missing or does not match the schema."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unmatchedSchema"
        200:
          description: "OK: The request was received and processed, but no product was found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.updateProductById"
        204:
          description: "No Content: The update was successful."
  /products/deleteProductId:{productId}:
    delete: #byId (just admin)
      tags:
      - admins
      - /products
      summary: "Delete any product by their ID: just Admins."
      operationId: "deleteProductById"
      description: "Admins can delete any product from the system's database."
      parameters:
      - name: productId
        in: path 
        required: true
        description: "Product's ID."
        schema:
          type: string
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        200:
          description: "OK: The request was received and processed, but no user was found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.deleteProductById"
        204:
          description: "No Content: The deletion was successful."
  #+++++++++++++++++++++++++++++++++++++++++++++++++#
  # Orders' endpoints:
  /orders/new:
    post: #create order (admin - user)
      tags:
        - admins
        - clients
        - /orders
      summary: "Creation of a new order."
      operationId: "createNewOrder"
      description: "Both Admins and Clients can place an order based on the required information  andstructure defined in the 'req.orderSchema'."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/req.orderSchema"
      responses:
        403:
          description: "Forbidden: No valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        400:
          description: "Bad Request: Something in the request body is missing or does not match the   schema."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unmatchedSchema"
        201:
            description: "Created: Order created successfully."
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/res.orderCreated"
  /orders/orderId:{orderId}:
    get: #byId (admin)
      tags:
        - admins
        - /orders
      summary: "Obtain an order's info by their ID: just Admins."
      operationId: "getOrderById"
      description: "Just an Admin can access any of the placed orders in the system."
      parameters:
      - name: orderId
        in: path 
        required: true
        description: "Order's ID."
        schema:
          type: string
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        200:
          description: "OK: If found, the order's information is delivered, otherwise, it isindicated  that the order doesn't exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.getOrderById"
  /orders/allOrders:
    get: #allSystemOrders (admin - client)
      tags:
      - admins
      - clients
      - /orders
      summary: "Obtain the list of all the orders: Admins and Clients (with restrictions)."
      operationId: "getAllOrders"
      description: "Admins have access to all of the placed orders in the system information, while Clients are authorized just to aceess to the orders placed by themselves."
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        200:
          description: "OK: The list of all of the products was obtained."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.getAllOrders"
  /orders/allOrdersByUserId:{userId}:
    get: #ordersByUserId (admin)
      tags:
      - admins
      - /orders
      summary: "Obtain an orders's info by an user's ID: just Admins."
      operationId: "getOrderByUserId"
      description: "Admins can obtain all the orders that were placed by a specific user."
      parameters:
      - name: userId
        in: path 
        required: true
        description: "User's ID."
        schema:
          type: string
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        200:
          description: "OK: If the user is found, their orders' information is delivered, unless they haven't placed any. In the case that the user is not found, it is indicated that the user doesn't exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.getAllOrdersByUserId"
  /orders/updateOrderStatusById:{orderId}:
    put: #orderStatus (admin)
      tags:
      - admins
      - /orders
      summary: "Update the order's status by their ID: just Admins."
      operationId: "updateOrdertById"
      description: "Admins can update any of the order's status for keeping and updated tracking of the delivery process."
      parameters:
      - name: orderId
        in: path 
        required: true
        description: "Order's ID."
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/req.updateOrderStatusSchema"
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        400:
          description: "Bad Request: Something in the request body is missing or does not match the schema."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unmatchedSchema"
        200:
          description: "OK: The request was received and processed, but no order was found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.updateOrderById"
        204:
          description: "No Content: The update was successful."
  /orders/deleteOrderById:{orderId}:
    delete: #byId (admin)
      tags:
      - admins
      - /orders
      summary: "Delete any order by their ID: just Admins."
      operationId: "deleteOrderById"
      description: "Admins can delete any order from the system's database."
      parameters:
      - name: orderId
        in: path 
        required: true
        description: "Order's ID."
        schema:
          type: string
      responses:
        403:
          description: "Forbidden: Not valid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.forbiddenAccess"
        401:
          description: "Unauthorized: The user does not have the permissions to execute the request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.unauthorizedAccess"
        200:
          description: "OK: The request was received and processed, but no user was found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/res.deleteOrderById"
        204:
          description: "No Content: The deletion was successful."
  #+++++++++++++++++++++++++++++++++++++++++++++++++#
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Entities:
    User:
      type: object
      properties:
        id_user: 
          type: integer
          example: 1
        register_date: 
          type: string
          example: "2021-07-08T14:41:50.000Z"
        username: 
          type: string
          example: "admin1_LSteinberg"
        fullname: 
          type: string
          example: "Laura Steinberg"
        email: 
          type: string
          example: "adm.lsteinber@gmail.com"
        cellphone_number: 
          type: string
          example: "3104345665"
        delivery_address: 
          type: string
          example: "Calle 125 # 12 - 23"
        user_password: 
          type: string
          example: "e4fdadffa6ffecda4e1b9479f8e08138d9e7a787fef4164a37b1375e7f24380c"
        salt: 
          type: string
          example: "d2bc508e-870a-4d01-9528-6a6dc21c2273"
        is_admin: 
          type: string
          example: "T"
    UserSimplified:
      type: object
      properties:
        register_date: 
            type: string
            example: "2021-07-08T14:41:50.000Z"
        username: 
          type: string
          example: "admin1_LSteinberg"
        fullname: 
          type: string
          example: "Laura Steinberg"
        email: 
          type: string
          example: "adm.lsteinber@gmail.com"
        cellphone_number: 
          type: string
          example: "3104345665"
        delivery_address: 
          type: string
          example: "Calle 125 # 12 - 23"
        is_admin: 
          type: string
          example: "T"
    Product:
      type: object
      properties:
        id_product:
          type: integer 
          example: 15
        product_name:
          type: string
          example: "Galleta de chocolate"
        product_price: 
          type: integer
          example: 16000
        product_category_desc: 
          type: string
          example: "Dessert"
    Order:
      type: object
      properties:
        id_order:
          type: integer 
          example: 1
        username:
          type: string 
          example: "admin1_LSteinberg"
        last_update_date: 
          type: integer
          example: "2021-07-09T13:32:31.000Z"
        status_description: 
          type: string
          example: "New"
        products: 
          type: string
          example: "1 x Deditos de queso, 1 x Papas criollas, 1 x Nachos con queso, 1 x Cheesecade oreo"
        method_description: 
          type: string
          example: "Cash"
        total_cost: 
          type: integer
          example: 61000

    # Requests
    ## Users' requests:
    req.registerSchema:
      type: object
      required:
        - username
        - fullname
        - email
        - cellphone_number
        - delivery_address
        - user_password
        - is_admin
      properties:
        username:
          type: string
          example: "admin1_LSteinberg"
          description: "Alphanumeric and special characters are allowed."
        fullname:
          type: string
          example: "Laura Steinberg"
          description: "Alphabetical characters."
        email:
          type: string
          example: "admin1@gmail.com"
          description: "Must match the pattern '^[A-Za-z0-9.!#$%&‘*+=?^_`{|}~-]{6,}$'."
        cellphone_number: 
          type: string
          example: "3104345665"
          description: "Numerical characters."
        delivery_address:
          type: string
          example: "Calle 125 # 12 - 23"
          description: "Alphanumeric and special characters are allowed."
        user_password:
          type: string
          example: "admin1"
          description: "Must match the pattern '^[A-Za-z0-9.!#$%&‘*+=?^_`{|}~-]{6,}$'. Must have at least 6 characters."
        is_admin:
          type: string
          example: "T"
          description: "For Admins permissions, value must be 'T'. If Admins permissions not granted, value must be 'F'."
    req.loginSchema:
      type: object
      required: 
      - email
      - user_password
      properties:
        email:
          type: string
          example: "adm.lsteinber@gmail.com"
          description: "Must match the pattern '^[A-Za-z0-9.!#$%&‘*+=?^_`{|}~-]{6,}$'."
        user_password:
          type: string
          example: "admin1"
          description: "Must match the pattern '^[A-Za-z0-9.!#$%&‘*+=?^_`{|}~-]{6,}$'. Must have at least 6 characters."
    req.updateUserSchema:
      type: object
      required:
      - upd_username
      - fullname
      - upd_email
      - cellphone_number
      - delivery_address
      - user_password
      - is_admin
      properties:
        upd_username:
          type: string
          example: "admin1_LSteinberg"
          description: "Alphanumeric and special characters are allowed."
        fullname:
          type: string
          example: "admin1@gmail.com"
          description: "Alphabetical characters."
        upd_email:
          type: string
          example: "admin1@gmail.com"
          description: "Must match the pattern '^[A-Za-z0-9.!#$%&‘*+=?^_`{|}~-]{6,}$'."
        cellphone_number:
          type: string
          example: "3104345665"
          description: "Numerical characters."
        delivery_address:
          type: string
          example: "Calle 125 # 12 - 23"
          description: "Alphanumeric and special characters are allowed."
        user_password:
          type: string
          example: "admin1"
          description: "Must match the pattern '^[A-Za-z0-9.!#$%&‘*+=?^_`{|}~-]{6,}$'. Must have at least 6 characters."
        is_admin:
          type: string
          example: "T"
          description: "For Admins permissions, value must be 'T'. If Admins permissions not granted, value must be 'F'."
    #+++++++++++++++++++++++++++++++++++++++++++++++++#
    ## Products' requests:
    req.productSchema:
      type: object
      required:
      - product_name
      - id_product_category
      - product_price
      properties:
        product_name:
          type: string
          example: "Chontaduro al wok"
        id_product_category:
          type: integer
          example: 2
          description: "Must be a value >= 1 and <= 0."
        product_price:
          type: integer
          example: 25000
    # req.updateUserSchema:
    #+++++++++++++++++++++++++++++++++++++++++++++++++#
    ## Orders' requests:
    req.orderSchema:
      type: object
      required:
      - id_paying_method
      - products
      properties:
        id_paying_method:
          type: integer
          example: 3
          description: "Must be a value >= 1 and <= 4."
        products:
          type: array
          items:
            type: integer
            format: int64
          example: [2, 2, 5, 10, 11]
    req.updateOrderStatusSchema:
      type: object
      required:
      - id_order_status
      properties:
        id_order_status:
          type: integer
          example: 5
          description: "Must be a value >= 1 and <= 6."
    #+++++++++++++++++++++++++++++++++++++++++++++++++#
    
    # Responses
    ## Globals
    res.unmatchedSchema: #400BadRequest
      type: object
      properties:
        Status:
          type: integer
          example: 200
        Message:
          type: string
          example: "The request body information is not in the propper format. Please review the API Documentation in relation to the JSON format expected."
        Result:
          type: string
          example: "The request could not be completed. No data was registered nor updated."
        MissingProperties:
          type: string
          example: "The following properties are missing and are required: 'is_admin'"
          description: All the missing properties that are required to match the schema, will be indicated here.
    res.unauthorizedAccess: #401Unauthorized
      type: object
      properties:
        Status:
          type: integer
          example: 401
        Message:
          type: string
          example: "The user's cretendials doesn't allow them to complete this request. Only an Administrator has the authorization."
        Result:
          type: string
          example: "Unauthorized."
    res.forbiddenAccess: #403Forbidden
      type: object
      properties:
        Status:
          type: integer
          example: 403
        Message:
          type: string
          example: "Incorrect password or email."
        Result:
          type: string
          example: "Forbidden access."
    #+++++++++++++++++++++++++++++++++++++++++++++++++#
    ## Users' responses: 
    ### Register 
    res.userCreationConflict: #409Conflic
      type: object
      properties:
        Status: 
          type: integer
          example: 409
        Message:
          type: string
          example: "The email 'adm.lsteinber@gmail.com' is already registered. Please enter a new email."
          description: This error will indicate if either the "email" or "username" are already registered.
        Result:
          type: string
          example: "Conflict"
    res.userCreated: #201Created
      type: object
      properties:
        Status:
          type: number
          example: 201
        Message: 
          type: string
          example: "User created successfully."
        Result:
          type: object
          properties:
            username:
              type: string
              example: "admin1_LSteinberg"
            email:
              type: string
              example: "adm.lsteinber@gmail.com"
            cellphone_number: 
              type: string
              example: "3104345665"
            is_admin: 
              type: string
              example: "T"
              description: Either a "T" for true or an "F" for false are returned.
            user_id:
              type: integer
              example: 1
    ### Login
    res.loginJWT: #200OK
      type: object
      properties:
        Status:
          type: integer
          example: 200
        Message:
          type: string
          example: "User successfully authenticated."
        Token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZF91c2VyIjoyLCJyZWdpc3Rlcl9kYXRlIjoiMjAyMS0wNy0wN1QyMzoxMTo1OS4wMDBaIiwidXNlcm5hbWUiOiJhZG1pbjFfTFN0ZWluYmVyZyIsImZ1bGxuYW1lIjoiTGF1cmEgU3RlaW5iZXJnIiwiZW1haWwiOiJhZG0ubHN0ZWluYmVyQGdtYWlsLmNvbSIsImNlbGxwaG9uZV9udW1iZXIiOiIzMTA0MzQ1NjY1IiwiZGVsaXZlcnlfYWRkcmVzcyI6IkNhbGxlIDEyNSAjIDEyIC0gMjMiLCJ1c2VyX3Bhc3N3b3JkIjoiYTZkYzk1ZDIyNWQ4ZWI1YjJlYTMyN2VjYmY0YzIwZjg3ODUxZDQwMjVhMTMzZTg0MWU1ZmNlNGRiZTY0ZjJhMiIsInNhbHQiOiI2MGI3YmZkZi04ODQ2LTRkN2UtYjJkMC03NjAxMWM3NDBiYTkiLCJpc19hZG1pbiI6IlQiLCJpYXQiOjE2MjU3NjY3ODcsImV4cCI6MTYyNTc2Nzk4N30.AqTDL44Tpi-SbEwhGmxWZbF0OnGPQqLoPdkLCg9_m0I"
          description: "The Token is generated by the server once the credentials verification is successfully made."
    ### getUsers
    res.getAllUsers: #200OK
      type: object
      properties:
        Status:
          type: integer
          example: 200
        Message:
          type: integer
          example: "List of all registered users obtained."
        Result:
          type: array
          items:
            $ref: "#/components/schemas/User"
    res.getUser: #OK200
      type: object
      properties:
        Status:
          type: integer
          example: 200
        Message: 
          type: string
          example: "User found."
        Result:
          type: array
          items:
            $ref: "#/components/schemas/UserSimplified"
        UserFound:
          type: boolean
          example: true
    ### updateUsers
    res.updateUserById: #OK200
      type: object
      properties:
        Status: 
          type: integer
          example: 200
        Message: 
          type: string
          example: "User not found."
        Result": 
          type: string
          example: "The user with id 0 doesn't exist, therefore no update can be done."
        UserFound: 
          type: boolean
          example: false
        UserDeleted":
          type: boolean 
          example: false
    ### deleteteUsers
    res.deleteUserById: #OK200
      type: object
      properties:
        Status: 
          type: integer
          example: 200
        Message: 
          type: string
          example: "User not found."
        Result": 
          type: string
          example: "The user with id 0 doesn't exist, therefore no deletion can be done."
        UserFound: 
          type: boolean
          example: false
        UserDeleted":
          type: boolean 
          example: false
    #+++++++++++++++++++++++++++++++++++++++++++++++++#
    ## Products' responses:
    ### createProducts
    res.productCreated: #OK200
      type: object
      properties:
        Status:
          type: number
          example: 201
        Message: 
          type: string
          example: "Product created successfully."
        Result:
          type: object
          properties:
            id_product:
              type: integer 
              example: 24
            product_name: 
              type: string
              example: "Chontaduro al wok"
            id_product_category: 
              type: integer
              example: 3
            product_price:
              type: integer
              example: 25000
    ### getProducts
    res.getProduct: #OK200
      type: object
      properties:
        Status:
          type: integer
          example: 200
        Message: 
          type: string
          example: "Product found."
        Result:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        ProductFound:
          type: boolean
          example: true
    res.getAllProducts: #OK200
      type: object
      properties:
        Status:
          type: integer
          example: 200
        Message:
          type: integer
          example: "List of all products obtained."
        Result:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    ### updateProducts
    res.updateProductById: #OK200
      type: object
      properties:
        Status: 
          type: integer
          example: 200
        Message: 
          type: string
          example: "Product not found."
        Result": 
          type: string
          example: "The product with id 29 doesn't exist, therefore,there is no information to be updated. Please proceed to the product creation endopoint."
        UserFound: 
          type: boolean
          example: false
        ProductFound:
          type: boolean 
          example: false
    ### deleteProducts
    res.deleteProductById: #OK200
      type: object
      properties:
        Status: 
          type: integer
          example: 200
        Message: 
          type: string
          example: "Product not found."
        Result": 
          type: string
          example: "The product with id 0 doesn't exist, therefore no deletion can be done."
        UserFound: 
          type: boolean
          example: false
        ProductFound:
          type: boolean 
          example: false
        ProductDeleted:
          type: boolean 
          example: false
    #+++++++++++++++++++++++++++++++++++++++++++++++++#
    ## Orders' responses:
    ### createOrders
    res.orderCreated: #OK200
      type: object
      properties:
        Status:
          type: number
          example: 201
        Message: 
          type: string
          example: "Order created successfully."
        Result:
          type: object
          properties:
            id_order:
              type: integer 
              example: 1
            username: 
              type: string
              example: "testUser1"
            products: 
              type: string
              example: "1 x Deditos de queso, 1 x Papas criollas, 1 x Nachos con queso, 1 x Cheesecake de oreo"
            total_cost:
              type: integer
              example: 61000
            paying_method:
              type: string
              example: "Cash"
    ### getOrders
    res.getOrderById: #OK200
      type: object
      properties:
        Status:
          type: integer
          example: 200
        Message: 
          type: string
          example: "Order found."
        Result:
          type: array
          items:
            $ref: "#/components/schemas/Order"
        OrderFound:
          type: boolean
          example: true
    res.getAllOrders: #OK200
      type: object
      properties:
        Status:
          type: integer
          example: 200
        Message:
          type: integer
          example: "List of all orders obtained."
        Result:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    res.getAllOrdersByUserId: #OK200
      type: object
      properties:
        Status:
          type: integer
          example: 200
        Message:
          type: integer
          example: "List of all the orders made by the user testUser1."
        Result:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        UserFound:
          type: boolean
          example: true
    ### updateOrder:
    res.updateOrderById: #OK200
      type: object
      properties:
        Status: 
          type: integer
          example: 200
        Message: 
          type: string
          example: "Order not found."
        Result": 
          type: string
          example: "The order with id 0 doesn't exist, therefore,there is no information to be updated."
        UserFound: 
          type: boolean
          example: false
        OrderFound:
          type: boolean 
          example: false
    ### deleteOrders
    res.deleteOrderById: #OK200
      type: object
      properties:
        Status: 
          type: integer
          example: 200
        Message: 
          type: string
          example: "Order not found."
        Result": 
          type: string
          example: "The order with id 0 doesn't exist, therefore no deletion can be done."
        UserFound: 
          type: boolean
          example: false
        OrderFound:
          type: boolean 
          example: false
        OrderDeleted:
          type: boolean 
          example: false
    #+++++++++++++++++++++++++++++++++++++++++++++++++#

